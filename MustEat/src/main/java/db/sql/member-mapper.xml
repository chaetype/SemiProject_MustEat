<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	
	<!-- 태민 (로그인관련) -->
	<entry key="loginMember">
		SELECT		
		      MEM_NO
			, MEM_ID
			, MEM_PWD
			, MEM_NAME
			, MEM_PHONE
			, MEM_EMAIL
			, MEM_ENROLLDATE
			, MEM_MODIFYDATE
			, MEM_STATUS
			, MEM_NICKNAME
			, MEM_GRADE
			, ADDRESS_CODE
			, ADDRESS
			, ADDRESS_DETAIL
			, ADDRESS_REF
			, MEM_IMGPATH
			, WITHDRAW
		FROM MEMBER
		WHERE (MEM_STATUS = 'Y' 
		   OR MEM_STATUS = 'A')
		  AND MEM_ID = ?
		  AND MEM_PWD = ?
	</entry>
	
	

	<!-- 태민 (아이디 찾기) -->
	<entry key="findId">
	SELECT
		  RPAD(SUBSTR(MEM_ID,1,3), LENGTH(MEM_ID), '*') AS"SECREAT_ID"
		, MEM_ID
		, MEM_EMAIL
	  FROM
	  	  MEMBER
     WHERE MEM_NAME = ?
	   AND MEM_EMAIL = ?
		
	</entry>
	
	<!-- 태민 (비밀번호 찾기) -->
	<entry key="findPwd">
		SELECT
			  MEM_PWD
			, MEM_EMAIL
		  FROM
		  	  MEMBER
		 WHERE MEM_ID = ?
		   AND MEM_EMAIL = ?
		
	</entry>
	
	<!-- 태민(회원가입 insert) -->
	<entry key="insertMember">
		INSERT
		  INTO MEMBER
		  (
		    MEM_NO
			, MEM_ID
			, MEM_PWD
			, MEM_NAME
			, MEM_PHONE
			, MEM_EMAIL
			, MEM_ENROLLDATE
			, MEM_MODIFYDATE
			, MEM_STATUS
			, MEM_NICKNAME
			, MEM_GRADE
			, ADDRESS_CODE
			, ADDRESS
			, ADDRESS_DETAIL
			, ADDRESS_REF
			, MEM_IMGPATH
			, WITHDRAW
		  )
		  VALUES
		  (
		    SEQ_MNO.NEXTVAL
		  , ?
		  , ?
		  , ?
		  , ?
		  , ?
		  , SYSDATE
          , NULL
          , DEFAULT
		  , ?
		  , '일반'
		  , ?
		  , ?
		  , ?
          , ?
          , NULL
          , NULL
		  )
	</entry>
	
	<!-- 태민 페이징 회원번호별 조회-->
	<entry key="selectList">
		<!-- 사용자가 요청한 페이지에 필요한 게시글 리스트 조회 --> 
		SELECT *
		 FROM (
            SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
              FROM MEMBER M
             WHERE M.MEM_STATUS = 'Y'
                OR M.MEM_STATUS = 'A'  
             ORDER
                BY MEM_NO DESC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
		
	</entry>
	
	<!-- 태민 페이징 회원이름별 조회-->
	<entry key="selectList1">
		<!-- 사용자가 요청한 페이지에 필요한 게시글 리스트 조회 --> 
		SELECT *
		 FROM (
            SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
              FROM MEMBER M
             WHERE M.MEM_STATUS = 'Y'
                OR M.MEM_STATUS = 'A'  
             ORDER
                BY MEM_NAME ASC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
		
	</entry>
	
	<!-- 태민 페이징 회원등급별 조회-->
	<entry key="selectList2">
		<!-- 사용자가 요청한 페이지에 필요한 게시글 리스트 조회 --> 
		SELECT *
		 FROM (
            SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
              FROM MEMBER M
             WHERE M.MEM_STATUS = 'Y'
                OR M.MEM_STATUS = 'A'  
             ORDER
                BY MEM_GRADE ASC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
		
	</entry>
	
	<!-- 태민 페이징2 -->
	<entry key="selectListCount">
		<!-- 현재 멤버 총 갯수 조회용 --> 
		SELECT COUNT(*) as "COUNT"
		  FROM MEMBER
		 WHERE (MEM_STATUS ='Y'
		    OR MEM_STATUS ='A')
	</entry>
	
	<!-- 태민 체크박스 체크된 회원 블랙리스트로 -->
	<entry key="withdrawalMember">
		UPDATE MEMBER
		   SET MEM_STATUS = 'B'
		 WHERE MEM_NO = ?
		 
	</entry>
	
	<!-- 태민 체크박스 체크된 회원 블랙리스트로 -->
	<entry key="modifyDate">
		UPDATE MEMBER
		   SET MEM_MODIFYDATE = SYSDATE
		 WHERE MEM_NO = ?
		 
	</entry>
	
	<!-- 태민 회원조회페이지 검색기능 -->
	<entry key ="searchList">
	SELECT *
		FROM (
		SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
              FROM MEMBER M 
             WHERE MEM_ID LIKE %?%
                OR MEM_NAME LIKE %?%
             ORDER
                BY MEM_NO DESC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- 은영 (회원 정보 수정) -->
	<entry key="updateMember">
	<!-- 회원정보 수정 요청시 실행할 sql문 -->
		UPDATE MEMBER
	    SET MEM_PWD = ? 
	      , MEM_NAME = ?
	      , MEM_PHONE = ?
	      , MEM_EMAIL = ?
	      , MEM_NICKNAME = ?
	      , MEM_IMGPATH = ?
	      , ADDRESS_CODE = ?
	      , ADDRESS = ?
	      , ADDRESS_DETAIL = ?
	      , ADDRESS_REF = ?
	      , MEM_MODIFYDATE = SYSDATE
		WHERE MEM_ID = ?
	</entry>
	
	<!-- 은영 (수정된 회원 정보 조회) -->
	<entry key="selectUpdateMember">
	<!-- 수정된 회원정보 조회시 실행할 sql문 -->
		SELECT		
		      MEM_NO
			, MEM_ID
			, MEM_PWD
			, MEM_NAME
			, MEM_PHONE
			, MEM_EMAIL
			, MEM_ENROLLDATE
			, MEM_MODIFYDATE
			, MEM_STATUS
			, MEM_NICKNAME
			, MEM_GRADE
			, ADDRESS_CODE
			, ADDRESS
			, ADDRESS_DETAIL
			, ADDRESS_REF
			, MEM_IMGPATH
			, WITHDRAW
		FROM MEMBER
		WHERE MEM_ID = ?
	</entry>

	
	

	<!-- 채윤 : 신고글 조회 -->
	<entry key="selectReportList">
		SELECT *
		  FROM (
		        SELECT ROWNUM RNUM, A.*
		          FROM (
		  		SELECT
				       REPORT_NO
				     , REM.MEM_NICKNAME
				     , SRM.MEM_ID
				     , SR.REVIEW_TITLE
				     , REPORT_CONTENT
		             , REPORT_DATE
				  FROM REPORT RE
				  JOIN MEMBER REM ON (RE.MEM_NO = REM.MEM_NO)
		          JOIN STORE_RE SR ON (RE.RE_NO = SR.RE_NO)
		          JOIN MEMBER SRM ON (SR.REVIEW_WRITER = SRM.MEM_NO)
				 ORDER 
				    BY REPORT_NO DESC
				    ) A
		       )
		 WHERE RNUM BETWEEN ? AND ?
				
	</entry>
	
	<!-- 은영 (회원 탈퇴 처리) -->
	<entry key="deleteMember">
	<!-- 회원 탈퇴 신청시 실행할 sql문 -->
		UPDATE MEMBER
		    SET MEM_STATUS = 'N'
		      , WITHDRAW = ?
		WHERE MEM_ID = ?
	  	  AND MEM_PWD = ?
	</entry>
	
	<!-- 은영(마이페이지 게시판 조회) -->
	<entry key="selectMyPage">
	<!-- 마이페이지에서 리뷰,적립금,가고싶다,팔로우 조회시 실행할 sql문 -->
		SELECT 
		    M.MEM_ID, <!-- 1. 로그인한 회원 아이디 -->
		    (SELECT COUNT(REVIEW_WRITER) 
		            FROM STORE_RE S 
		    WHERE M.MEM_NO = S.REVIEW_WRITER) AS STORE_REVIEW, <!-- 2. 식당 리뷰 갯수 -->
		    (SELECT COUNT(REVIEW_WRITER) 
		            FROM PRODUCT_REVIEW P 
		    WHERE M.MEM_NO = P.REVIEW_WRITER) AS PRODUCT_REVIEW, <!-- 3. 밀키트 리뷰 갯수 -->
		    (SELECT SUM(MPS_RECORD) 
		            FROM MPS_POINT MP 
		    WHERE M.MEM_NO = MP.MEM_NO) AS MPS_POINT, <!-- 4. 적립금 총 금액 -->
		    (SELECT COUNT(MEM_NO) 
		            FROM STORE_SCRAP SS 
		    WHERE M.MEM_NO = SS.MEM_NO) AS STORE_SCRAP, <!-- 5. 식당 스크랩 갯수 -->
		    (SELECT COUNT(F_MNO) 
		            FROM FOLLOW F 
		    WHERE M.MEM_NO = F.F_MNO) AS FOLLOW <!-- 6. 팔로우한 인원 수 -->
		FROM MEMBER M
		WHERE MEM_ID = ? <!-- 로그인한 회원 아이디 -->
	</entry>
	
	<!-- 은영 (마이페이지에서 적립금 내역 중 최신 2개 조회) -->
	<entry key="selectNewPoint">
		SELECT ROWNUM, A.* 
		    FROM (
		            SELECT MEM_ID
		                 , MPS_CATEGORY
		                 , MPS_RECORD
		                 , MPS_STATUS
		                 , SU_DATE
		            FROM MPS_POINT
		            JOIN MEMBER USING (MEM_NO)
		            WHERE MEM_ID = ? <!-- 로그인한 회원 아이디 -->
		            ORDER BY SU_DATE DESC
		        )A
		WHERE ROWNUM BETWEEN 1 AND 2
	</entry>
	
	<!-- 은영 (마이페이지 가고싶다 스크랩 중 최신 2개 조회) -->
	<entry key="selectNewScrap">
		SELECT ROWNUM, A.*
		    FROM (
		        SELECT 
		            (SELECT STORE_NAME <!-- 식당이름 -->
		                FROM STORE S 
		                WHERE SC.STORE_NO = S.STORE_NO) AS STORE_NAME,
		            (SELECT STORE_ADDRESS <!-- 식당주소 -->
		                FROM STORE S
		                WHERE SC.STORE_NO = S.STORE_NO) AS STORE_ADDRESS,
		            (SELECT AVG(REVIEW_RATE) <!-- 식당 평균 -->
		                FROM STORE_RE SR
		                WHERE SR.STORE_NO = SC.STORE_NO) AS RATE
		        FROM STORE_SCRAP SC
		        JOIN MEMBER USING (MEM_NO)
		        WHERE MEM_ID = ? <!-- 로그인한 회원 아이디 -->
		        ORDER BY SCRAP_DATE DESC
		        ) A
		WHERE ROWNUM BETWEEN 1 AND 2
	</entry>

	
	<!-- 서원 관리자 적립금 조회 -->
	<entry key="membershipList">
		SELECT
		       M.MEM_NO
		     , M.MEM_NAME
		     , M.MEM_ID
		     , M.MEM_PHONE
		     , SU_DATE
		     , MPS_RECORD
		     , MPS_CATEGORY
		     , MPS_STATUS
		  FROM MPS_POINT MP, MEMBER M
		 WHERE MP.MEM_NO = M.MEM_NO
		 ORDER
		    BY SU_DATE DESC
	</entry>
	
	
	<!-- 서원 관리자 적립금 지급 -->
	<entry key="membershipPayList">
		SELECT MEM_NO, MEM_NAME, MEM_ID, REVIEW_MONTH, SAVE_POINT, MPS_DATE, P_STATUS
		  FROM (
		          SELECT
		               M.MEM_NO
		             , M.MEM_NAME
		             , M.MEM_ID
		             , (
		                 SELECT COUNT(*)
		                  FROM STORE_RE
		                 WHERE REVIEW_WRITER = M.MEM_NO
		                   AND EXTRACT(MONTH FROM SYSDATE) = EXTRACT(MONTH FROM REVIEW_ENROLLDATE)
		               ) "REVIEW_MONTH"
		             , 5000 "SAVE_POINT"
		             , TO_CHAR(TRUNC(ADD_MONTHS(SR.REVIEW_ENROLLDATE, +1), 'mm'),'YYYY-MM-DD') "MPS_DATE"
		             , P_STATUS
		          FROM MPS_POINT MP
		          JOIN MEMBER M ON (M.MEM_NO = MP.MEM_NO)
		          JOIN STORE_RE SR ON (M.MEM_NO = SR.REVIEW_WRITER)
		         WHERE MP.P_STATUS = '대기중'  
		           AND MPS_STATUS = '적립'
		       )
	</entry>
	
	<!-- 서원 관리자 적립금 지급하기 버튼 클릭시 상태값 바꾸기 -->
	<entry key="UpdateMembership">
		UPDATE MPS_POINT
		   SET P_STATUS = '지급완료'
		     , MPS_RECORD = 5000
		 WHERE TOS_NO = ?
		

	</entry>
	
		<!-- 채윤 나의 팔로우 목록 조회 -->
	<entry key="myFollowingList">
		SELECT 
		       F.FOLLOW_NO
		     , M.MEM_NICKNAME
		     , M.MEM_IMGPATH
		     , (
		         SELECT COUNT(*)
		           FROM FOLLOW FF
		          WHERE FF.FING_MNO = F.FING_MNO
		       ) AS FOLLOW
		     , (
		         SELECT COUNT(*)
		           FROM PRODUCT_REVIEW
		          WHERE REVIEW_WRITER = F.FING_MNO
		       ) AS PRODUCT_REVIEW
		     , (
		         SELECT COUNT(*)
		         FROM STORE_RE
		         WHERE REVIEW_WRITER = F.FING_MNO
		       )  AS STORE_REVIEW
		  FROM FOLLOW F
		  JOIN MEMBER M ON(F.FING_MNO = M.MEM_NO)
		 WHERE F_MNO = ?
	</entry>
	

	<!-- 서원 사용자 적립금 조회 -->
	<entry key="membershipUserList">
		SELECT 
		       SU_DATE
		     , MPS_CATEGORY
		     , MPS_STATUS
		     , MPS_RECORD
  		  FROM MPS_POINT
  		 WHERE MEM_NO = ?
	</entry>

	
	<!-- 태민 회원가입시 아이디 중복검사 -->
	<entry key="idCheck">
		SELECT 
		       COUNT(*) AS "COUNT"
		  FROM MEMBER
		 WHERE MEM_ID = ?
	</entry>
	
	<!-- 태민 회원가입시 닉네임 중복검사 -->
	<entry key="nickCheck">
		SELECT 
		       COUNT(*) AS "COUNT"
		  FROM MEMBER
		 WHERE MEM_NICKNAME = ?
	</entry>
	
	<!-- 태민 회원가입시 이메일 중복검사 -->
	<entry key="emailCheck">
		SELECT 
		       COUNT(*) AS "COUNT"
		  FROM MEMBER
		 WHERE MEM_EMAIL = ?
	</entry>
	
	
	<!-- @@@@@태민 탈퇴상태 회원 관리@@@@ -->
	 
	<!-- 태민 페이징 이름별 조회-->
	<entry key="bselectList">
		<!-- 사용자가 요청한 페이지에 필요한 게시글 리스트 조회 --> 
		SELECT *
		 FROM (
            SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
					, MEM_MODIFYDATE-MEM_ENROLLDATE AS"DAY"
              FROM MEMBER M
             WHERE M.MEM_STATUS = 'B'
                OR M.MEM_STATUS = 'N'  
             ORDER
                BY MEM_NAME ASC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
		
	</entry>
	
	<!-- 태민 페이징 탈퇴유형별 조회-->
	<entry key="bselectList1">
		<!-- 사용자가 요청한 페이지에 필요한 게시글 리스트 조회 --> 
		SELECT *
		 FROM (
            SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
					, MEM_MODIFYDATE-MEM_ENROLLDATE AS"DAY"
              FROM MEMBER M
             WHERE M.MEM_STATUS = 'B'
                OR M.MEM_STATUS = 'N'  
             ORDER
                BY M.MEM_STATUS ASC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
		
	</entry>
	
	<!-- 태민 페이징 탈퇴일 조회-->
	<entry key="bselectList2">
		<!-- 사용자가 요청한 페이지에 필요한 게시글 리스트 조회 --> 
		SELECT *
		 FROM (
            SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
					, MEM_MODIFYDATE-MEM_ENROLLDATE AS"DAY"
              FROM MEMBER M
             WHERE M.MEM_STATUS = 'B'
                OR M.MEM_STATUS = 'N'  
             ORDER
                BY MEM_MODIFYDATE DESC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
		
	</entry>
		
		
		<!-- 태민 탈퇴기간별 조회 -->
		<entry key="bselectList3">
		<!-- 사용자가 요청한 페이지에 필요한 게시글 리스트 조회 --> 
		SELECT *
		 FROM (
            SELECT ROWNUM RNUM, A.*
              FROM (
             SELECT 
                      MEM_NO
					, MEM_ID
					, MEM_PWD
					, MEM_NAME
					, MEM_PHONE
					, MEM_EMAIL
					, MEM_ENROLLDATE
					, MEM_MODIFYDATE
					, MEM_STATUS
					, MEM_NICKNAME
					, MEM_GRADE
					, ADDRESS_CODE
					, ADDRESS
					, ADDRESS_DETAIL
					, ADDRESS_REF
					, MEM_IMGPATH
					, WITHDRAW
					, MEM_MODIFYDATE-MEM_ENROLLDATE AS"DAY"
              FROM MEMBER M
             WHERE M.MEM_STATUS = 'B'
                OR M.MEM_STATUS = 'N'  
		     ORDER
          	     BY DAY ASC
            ) A
        ) 
		WHERE RNUM BETWEEN ? AND ?
		
        	
		
	</entry>
	
	<!-- 태민 페이징2 -->
	<entry key="bselectListCount">
		<!-- 탈퇴 멤버 총 갯수 조회용 --> 
		SELECT COUNT(*) as "COUNT"
		  FROM MEMBER
		 WHERE (MEM_STATUS ='N'
		    OR MEM_STATUS ='B')
	</entry>
	
	<!-- 태민 체크박스 체크된 회원정보 삭제 -->
	<entry key="bwithdrawalMember">

		DELETE 
		FROM MEMBER 
		WHERE MEM_NO = ?
		 
	</entry>
	
	<!-- 태민 체크박스 체크된 회원정보 복구 -->
	<entry key="revivalMember">
		UPDATE MEMBER
		   SET MEM_STATUS = 'Y'
		 WHERE MEM_NO = ?
	</entry>
	
	
	<!-- @@@@@태민 탈퇴상태 회원 관리@@@@ -->
	
	
	

	<!-- 서원 사용자 적립금 조회 페이지 사용가능한 적립금 조회 -->
	<entry key="membershipUseable">
		SELECT NVL(SUM(MPS_RECORD), 0) "USEABLE_MPS"
		  FROM MPS_POINT
		 WHERE MEM_NO = ?
	</entry>
	
	<!-- 서원 사용자 적립금 조회 페이지 사용가능한 적립금 조회 -->
	<entry key="membershipDelete">
		SELECT NVL(SUM(MPS_RECORD), 0) "MPS_DELETE"
		  FROM MPS_POINT
		 WHERE MEM_NO = ?
		   AND MPS_STATUS = '적립'
		   AND MONTHS_BETWEEN(SYSDATE,SU_DATE) BETWEEN 11 AND 12
	</entry>
	
	<!-- 서원 사용자 my리뷰 조회 -->
	<entry key="memberReviewList">
		(SELECT 
		        REVIEW_ENROLLDATE AS RV_DATE
		      , STORE_NAME AS RV_NAME
		      , SR_CATEGORY AS RV_CATEGORY
		      , REVIEW_RATE AS RV_RATE
		   FROM STORE_RE
		   JOIN STORE USING(STORE_NO)
		  WHERE REVIEW_WRITER = ?
		
		 UNION
		
		 SELECT
		        PR_REVIEW_ENROLLDATE
		      , PRODUCT_NAME
		      , PR_CATEGORY
		      , PR_REVIEW_RATE
		   FROM PRODUCT_REVIEW
		   JOIN PRODUCT USING(PRODUCT_CODE)
		  WHERE REVIEW_WRITER = ?
	  	) ORDER BY RV_DATE DESC
	</entry>
	
	<!-- 서원 사용자 my리뷰 이번달 리뷰 조회 -->
	<entry key="memberReviewListMonth">
		SELECT NVL(COUNT(*), 0) AS RV_MONTH
		  FROM
		(SELECT SR.REVIEW_CONTENT
		   FROM STORE_RE SR
		   JOIN MEMBER M ON (SR.REVIEW_WRITER = M.MEM_NO)
		  WHERE M.MEM_NO = ?
		    AND MONTHS_BETWEEN(SYSDATE,REVIEW_ENROLLDATE) BETWEEN 0 AND 1
		  
		  UNION
		  
		 SELECT PR.PR_REVIEW_CONTENT
		   FROM PRODUCT_REVIEW PR
		   JOIN MEMBER M ON (PR.REVIEW_WRITER = M.MEM_NO)
		  WHERE M.MEM_NO = ?
		     AND MONTHS_BETWEEN(SYSDATE, PR_REVIEW_ENROLLDATE) BETWEEN 0 AND 1)
	</entry>
	
	<!-- 서원 사용자 my리뷰 그동안 리뷰 조회 -->
	<entry key="memberReviewListTotal">
		SELECT NVL(COUNT(*), 0) AS RV_TOTAL
		  FROM STORE_RE SR
		  JOIN MEMBER M ON (M.MEM_NO = SR.REVIEW_WRITER)
		 WHERE REVIEW_WRITER = ?
	</entry>
	
	
	
	
	
	
	<!-- 채윤 팔로우를 위한 회원목록 조회 -->
	<entry key="selectFMemList">
		SELECT
			   MEM_NO
			 , MEM_IMGPATH
			 , MEM_NICKNAME
			 , MEM_ID 
		     , (
		         SELECT COUNT(*)
		         FROM STORE_RE
		         WHERE REVIEW_WRITER = MEM_NO
		       )  AS STORE_REVIEW
		  FROM MEMBER M
		 
		       
	</entry>
	
	<!-- 채윤 신고 등록 -->
	<entry key="reportInsert">
		INSERT 
		  INTO REPORT
		     (
		       REPORT_NO
		     , REPORT_DATE
		     , REPORT_CONTENT
		     , REPORT_TYPE
		     , MEM_NO<!-- 신고한 회원 번호 -->
		     , RE_NO
		     , RP_MEM_ID<!-- 신고당한 회원아이디 -->
		     , MEM_NICKNAME_RP<!-- 신고한 회원 닉네임 -->
		     )
		VALUES
		     (
		       SEQ_REPNO.NEXTVAL
		     , SYSDATE
		     , ?
		     , ?
		     , ?
		     , ?
		     , ?
		     , ? 
		     )
	</entry>
	
	
	<!-- 채윤 가게 찜 목록 조회 -->
	<entry key="storeScrapList">
		SELECT 
		       SCRAP_NO
		     , S.STORE_IMG_PATH
		     , S.STORE_NAME
		     , S.STORE_ADDRESS
		     , S.SCRAP_RATE
		  FROM STORE_SCRAP SS
		  JOIN STORE S ON (S.STORE_NO = SS.STORE_NO)
		  JOIN MEMBER M ON (M.MEM_NO = SS.MEM_NO)
		  WHERE SS.MEM_NO = ?
		     
	</entry>
	
	<!-- 채윤 가게찜 등록 -->
	<entry key="storeScrapInsert">
		INSERT 
		  INTO STORE_SCRAP
		     (
		       STORE_NO
		     , MEM_NO
		     , SCRAP_DATE
		     , SCRAP_NO
		     , STORE_IMG
		     )
		VALUES
		     (
		       ?
		     , ?
		     , SYSDATE
		     , SEQ_SSCRAPNO.NEXTVAL
		     , ?
		     )
	</entry>
	
	<!-- 채윤 팔로우 등록 -->
	<entry key="followInsert">
		INSERT 
		  INTO FOLLOW
		     (
			   FOLLOW_NO
			 , F_MNO
			 , FING_MNO
			 , ENROLL_DATE
		     )
		VALUES
		     (
		       SEQ_FOLNO.NEXTVAL
		     , ?
		     , ?
		     , SYSDATE
		     )
	</entry>
	
	<!-- 채윤 신고 페이징... -->
	<entry key="selectReportListCount">
		SELECT
		       COUNT(*) AS COUNT
		  FROM REPORT
	</entry>
	
	<!-- 채윤 신고 삭제 -->
	<entry key="deleteReport">
		UPDATE
		       STORE_RE
		   SET REVIEW_STATUE = 'Y'
	</entry>
	
	<!-- 채윤 언팔로우 -->
	<entry key="unfollow">
	DELETE FROM FOLLOW
        
	</entry>
</properties>
